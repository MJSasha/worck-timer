@using Microsoft.AspNetCore.Components.Authorization
@using QuickActions.Web.Identity.Services;

@typeparam TSession

@implements IDisposable

<CascadingValue Value="SessionService.SessionData">
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                @Authorized
            </Authorized>
            <NotAuthorized>
                @NotAuthorized
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</CascadingValue>

@code {

    [Inject]
    public SessionService<TSession> SessionService { get; set; }

    [Parameter]
    public RenderFragment Authorized { get; set; }

    [Parameter]
    public RenderFragment NotAuthorized { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        SessionService.OnRefreshSession += OnSessionChanged;
    }

    private Task OnSessionChanged(TSession user) => InvokeAsync(StateHasChanged);

    void IDisposable.Dispose()
    {
        SessionService.OnRefreshSession -= OnSessionChanged;
    }
}