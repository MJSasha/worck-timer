@using WorkTimer.Common.Utils
@using WorkTimer.Common.Interfaces
@using WorkTimer.Common.Models
@using WorkTimer.App.Services
@using QuickActions.Common.Specifications
@using BlazorModalDialogs.Definitions
@inherits Dialog<User, object>

<DialogLayout IsDisplayed="IsDisplayed">
    <Modal ModalSize="ModalSize.Large" Title="Пользователь" OnClose="() => this.Cancel()" DispalyCenter OnKeyEnterPressed="OnKeyEnterPressed">
        <Content>
            <MudGrid>
                <MudItem xs="4">
                    <MudForm ReadOnly>
                        <MudTextField Variant="Variant.Filled" T="string" Label="Имя" Value="Params.Name"/>
                        <MudTextField Variant="Variant.Filled" T="string" Label="Логин" Value="Params.Email"/>
                        <MudTextField Variant="Variant.Filled" T="string" Label="Роль" Value="Params.Role.ToString()"/>
                        <MudNumericField Format="N2" Variant="Variant.Filled" T="decimal" Label="Оклад" Value="Params.Salary"/>
                        @if (workPeriods != null)
                        {
                            <MudDivider Class="my-3"/>
                            <MudTextField Variant="Variant.Filled" T="string" Label="Время работы" Value="workDuration.Humanize()"/>
                            <MudNumericField Variant="Variant.Filled" T="decimal" Format="N2" decimal Label="Оплата за месяц" Value="durationSalary"/>
                        }
                    </MudForm>
                </MudItem>
                <MudItem xs="8">
                    <MudDatePicker
                        DateFormat="yyyy/MM"
                        OpenTo="OpenTo.Year"
                        FixDay="1"
                        Variant="Variant.Outlined"
                        Required @bind-Date="SelectedMonth"
                        Label="Месяц"/>
                    @if (workPeriods != null)
                    {
                        <MudTable Dense FixedHeader Class="mt-3 overflow-auto" Height="317px" Items="workPeriods">
                            <HeaderContent>
                                <MudTh>Начало</MudTh>
                                <MudTh>Конец</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Начало">@context.StartAt.Humanize()</MudTd>
                                <MudTd DataLabel="Конец">@context.EndAt.Humanize()</MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudItem>
            </MudGrid>
        </Content>
        <Footer>
            <div class="mt-3">
                <ModalButton class="btn-outline-danger" OnClick="() => this.Cancel()">Закрыть</ModalButton>
            </div>
        </Footer>
    </Modal>
</DialogLayout>

@code {

    [Inject]
    public IWorkPeriod WorkPeriodsService { get; set; }

    [Inject]
    public ExceptionsHandler ExceptionsHandler { get; set; }

    private DateTime? SelectedMonth
    {
        get => selectedMonth;
        set
        {
            if (!selectedMonth.Equals(value))
            {
                selectedMonth = value;
                LoadPeriodsData();
            }
        }
    }

    private DateTime? selectedMonth;
    private List<WorkPeriod> workPeriods;
    private TimeSpan workDuration = new();
    private decimal durationSalary;

    protected override void OnAfterShow()
    {
        SelectedMonth = null;
        workPeriods = null;
        StateHasChanged();
    }

    protected void OnKeyEnterPressed()
    {
        this.Cancel();
    }

    private async Task LoadPeriodsData()
    {
        try
        {
            if (SelectedMonth == null || SelectedMonth == default) return;

            workPeriods = await WorkPeriodsService.ReadMany(
                new Specification<WorkPeriod>(p => p.EndAt != null
                                                   && p.StartAt.Date >= SelectedMonth.Value.ToUniversalTime()
                                                   && p.StartAt.Date < SelectedMonth.Value.ToUniversalTime().AddMonths(1)
                                                   && p.UserId == Params.Id),
                0,
                int.MaxValue
            );

            workDuration = workPeriods.GetDuration();
            durationSalary = CalculateTotalSalary(workDuration);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ExceptionsHandler.Handle(ex);
            this.Cancel();
        }
    }

    private decimal CalculateTotalSalary(TimeSpan workDuration)
    {
        var workDaysCount = selectedMonth.Value.GetCountWorkDaysInMonth();

        return (decimal)(Params.Salary / (workDaysCount * 8)) * (decimal)workDuration.TotalHours;
    }

}