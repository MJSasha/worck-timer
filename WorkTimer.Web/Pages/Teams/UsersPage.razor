@using QuickActions.Common.Data
@using QuickActions.Common.Specifications
@using WorkTimer.App.Services
@using WorkTimer.Common.Interfaces
@using WorkTimer.Common.Models
@using WorkTimer.Web.Dialogs
@using WorkTimer.Web.Dialogs.CreateOrEditUserDialog

@page "/users"

@attribute [Authorize]

<PageLayout IsLoading="IsLoading" PageTitle="Статистика">
    <Content>
        <div class="d-flex justify-content-center w-100 p-3">
            <MudTable Hover Striped Style="min-width: 60%" Items="@Users" OnRowClick="new EventCallback<TableRowClickEventArgs<User>>(this, RowClickEvent)" Filter="new Func<User,bool>(FilterUsers)">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Пользователи</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Имя</MudTh>
                    <MudTh>Почта</MudTh>
                    <MudTh>Роль</MudTh>
                    <MudTh>Оклад</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Имя">@context.Name</MudTd>
                    <MudTd DataLabel="Почта">@context.Email</MudTd>
                    <MudTd DataLabel="Роль">@context.Role</MudTd>
                    <MudTd DataLabel="Роль">@context.Salary</MudTd>
                    <MudTd Style="text-align:right">
                        @if (CurrentSession.Data.Id != context.Id)
                        {
                            <MudIconButton OnClick="() => UpdateUser(context)" Icon="@Icons.Material.Filled.Edit" Color="Color.Secondary" Size="Size.Small" />
                        }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </div>
        <MudFab OnClick="CreateUser" Style="position: absolute; bottom: 20px; right: 20px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />
    </Content>
</PageLayout>

@code {

    [CascadingParameter]
    public Session<User> CurrentSession { get; set; }

    [Inject]
    public IUsers UsersService { get; set; }

    [Inject]
    public DialogsService DialogsService { get; set; }

    [Inject]
    public ExceptionsHandler ExceptionsHandler { get; set; }

    private bool IsLoading { get => isLoading; set { isLoading = value; StateHasChanged(); } }
    private string searchString = "";
    private HashSet<User> selectedItems = new HashSet<User>();

    private bool isLoading;
    private List<User> Users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersInfo();
    }

    private bool FilterUsers(User element) => FilterUsers(element, searchString);

    private bool FilterUsers(User element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }

    private Task RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    {
        return ShowUserInfo(tableRowClickEventArgs.Item);
    }

    private async Task ShowUserInfo(User user)
    {
        try
        {
            await DialogsService.Show<UsersDataDialog, User, object>(user);
        }
        catch (ObjectDisposedException) { /* ignore */ }
    }

    private async Task CreateUser()
    {
        try
        {
            var user = await DialogsService.Show<CreateOrEditUserModal, CreateOrEditUserDialogParams, User>(new CreateOrEditUserDialogParams
            {
                User = new()
            });

            await UsersService.Create(user);
            await LoadUsersInfo();
        }
        catch (ObjectDisposedException) { /* ignore */ }
        catch (Exception ex)
        {
            await ExceptionsHandler.Handle(ex);
        }
    }

    private async Task UpdateUser(User user)
    {
        try
        {
            var userToUpdate = await DialogsService.Show<CreateOrEditUserModal, CreateOrEditUserDialogParams, User>(new CreateOrEditUserDialogParams
            {
                User = user,
                EditMode = true
            });

            await UsersService.Update(userToUpdate);
            await LoadUsersInfo();
        }
        catch (ObjectDisposedException) { /* ignore */ }
        catch (Exception ex)
        {
            await ExceptionsHandler.Handle(ex);
        }
    }

    private async Task LoadUsersInfo()
    {
        IsLoading = true;
        Users = await UsersService.Read(new Specification<User>(), 0, int.MaxValue);
        IsLoading = false;
    }
}