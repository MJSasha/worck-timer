@using QuickActions.Common.Specifications
@using WorkTimer.Common.Interfaces
@using WorkTimer.Common.Models

@page "/users"

@attribute [Authorize]

<PageLayout PageTitle="Статистика">
    <Content>
        <div class="d-flex justify-content-center w-100 p-3">
            <MudTable Hover Striped Style="min-width: 60%" Items="@Users" Filter="new Func<User,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Пользователи</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Имя</MudTh>
                    <MudTh>Почта</MudTh>
                    <MudTh>Роль</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Имя">@context.Name</MudTd>
                    <MudTd DataLabel="Почта">@context.Email</MudTd>
                    <MudTd DataLabel="Роль">@context.Role</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </div>
    </Content>
</PageLayout>

    @code {

    [Inject]
    public IUsers UsersService { get; set; }

    private string searchString = "";
    private User selectedItem = null;
    private HashSet<User> selectedItems = new HashSet<User>();

    private List<User> Users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        Users = await UsersService.Read(new Specification<User>(), 0, int.MaxValue);
    }

    private bool FilterFunc1(User element) => FilterFunc(element, searchString);

    private bool FilterFunc(User element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }
}